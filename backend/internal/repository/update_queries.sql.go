// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: update_queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const updateIngestionJobStatus = `-- name: UpdateIngestionJobStatus :exec
UPDATE ingestion_jobs
SET
	status = $2,
	completed_at = NOW(),
	error_details = $3,
	rows_upserted = $4,
	rows_triaged = $5
WHERE
	id = $1
`

type UpdateIngestionJobStatusParams struct {
	ID           pgtype.UUID `json:"id"`
	Status       string      `json:"status"`
	ErrorDetails pgtype.Text `json:"error_details"`
	RowsUpserted pgtype.Int4 `json:"rows_upserted"`
	RowsTriaged  pgtype.Int4 `json:"rows_triaged"`
}

// Updates the status and details of an ingestion job
func (q *Queries) UpdateIngestionJobStatus(ctx context.Context, arg UpdateIngestionJobStatusParams) error {
	_, err := q.db.Exec(ctx, updateIngestionJobStatus,
		arg.ID,
		arg.Status,
		arg.ErrorDetails,
		arg.RowsUpserted,
		arg.RowsTriaged,
	)
	return err
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET
	scope = $2,
	status = $3,
	custom_properties = $4,
	updated_at = NOW()
WHERE
	id = $1
RETURNING id, item_type, scope, business_key, status, custom_properties, embedding, created_at, updated_at
`

type UpdateItemParams struct {
	ID               int64       `json:"id"`
	Scope            pgtype.Text `json:"scope"`
	Status           ItemStatus  `json:"status"`
	CustomProperties []byte      `json:"custom_properties"`
}

// Updates the mutable fields of a specific item
func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, updateItem,
		arg.ID,
		arg.Scope,
		arg.Status,
		arg.CustomProperties,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemType,
		&i.Scope,
		&i.BusinessKey,
		&i.Status,
		&i.CustomProperties,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "users"
SET
	display_name = $2,
	is_active = $3
WHERE
	id = $1
RETURNING id, auth_provider_subject, email, display_name, is_active, is_admin, updated_at, created_at
`

type UpdateUserParams struct {
	ID          int64       `json:"id"`
	DisplayName pgtype.Text `json:"display_name"`
	IsActive    bool        `json:"is_active"`
}

// Updates a user's mutable details
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.DisplayName, arg.IsActive)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AuthProviderSubject,
		&i.Email,
		&i.DisplayName,
		&i.IsActive,
		&i.IsAdmin,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
