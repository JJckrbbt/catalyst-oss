// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: merge_queries.sql

package repository

import (
	"context"
)

const deactivateItemsBySource = `-- name: DeactivateItemsBySource :exec
UPDATE items SET status = 'inactive'
WHERE item_type= $1 AND custom_properties->>'reporting_source' = $2
`

type DeactivateItemsBySourceParams struct {
	ItemType         ItemType `json:"item_type"`
	CustomProperties []byte   `json:"custom_properties"`
}

func (q *Queries) DeactivateItemsBySource(ctx context.Context, arg DeactivateItemsBySourceParams) error {
	_, err := q.db.Exec(ctx, deactivateItemsBySource, arg.ItemType, arg.CustomProperties)
	return err
}

const upsertItems = `-- name: UpsertItems :execrows
INSERT INTO items (
	item_type, scope, business_key, status, custom_properties, embedding
)
SELECT
	item_type,
	scope, 
	business_key,
	'active',
	custom_properties,
	embedding
FROM temp_items_staging
ON CONFLICT (item_type, business_key) DO UPDATE SET 
	status = EXCLUDED.status,
	scope = EXCLUDED.scope,
	custom_properties = items.custom_properties || EXCLUDED.custom_properties,
	embedding = EXCLUDED.embedding,
	updated_at = NOW()
`

// Insert new records from staging, or update existing ones based on business key
func (q *Queries) UpsertItems(ctx context.Context) (int64, error) {
	result, err := q.db.Exec(ctx, upsertItems)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
