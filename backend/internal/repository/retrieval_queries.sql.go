// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: retrieval_queries.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEventsForItem = `-- name: GetEventsForItem :many
SELECT id, item_id, event_type, event_data, created_by, created_at FROM "items_events"
WHERE item_id = $1
ORDER BY created_at DESC
`

// Fetch the event history for a specific item, newest first
func (q *Queries) GetEventsForItem(ctx context.Context, itemID int64) ([]ItemsEvent, error) {
	rows, err := q.db.Query(ctx, getEventsForItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ItemsEvent
	for rows.Next() {
		var i ItemsEvent
		if err := rows.Scan(
			&i.ID,
			&i.ItemID,
			&i.EventType,
			&i.EventData,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemForUpdate = `-- name: GetItemForUpdate :one
SELECT id, item_type, scope, business_key, status, custom_properties, embedding, created_at, updated_at FROM "items"
WHERE id = $1 LIMIT 1
`

// Fetch a single item for update
func (q *Queries) GetItemForUpdate(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRow(ctx, getItemForUpdate, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemType,
		&i.Scope,
		&i.BusinessKey,
		&i.Status,
		&i.CustomProperties,
		&i.Embedding,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByAuthProviderSubject = `-- name: GetUserByAuthProviderSubject :one
SELECT id, auth_provider_subject, email, display_name, is_active, is_admin, updated_at, created_at FROM "users" WHERE auth_provider_subject = $1
`

// Fetch a single user by their external auth provider ID
func (q *Queries) GetUserByAuthProviderSubject(ctx context.Context, authProviderSubject string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAuthProviderSubject, authProviderSubject)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AuthProviderSubject,
		&i.Email,
		&i.DisplayName,
		&i.IsActive,
		&i.IsAdmin,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCommentsForItem = `-- name: ListCommentsForItem :many
SELECT
	c.id,
	c.comment,
	c.created_at,
	u.display_name,
	-- Aggregate mentioned user IDs and names into JSON array
	(
		SELECT COALESCE(json_agg(json_build_object('user_id', mu.id, 'display_name', mu.display_name)), '[]')
		FROM comment_mentions cm
		JOIN users mu ON cm.user_id = mu.id
		WHERE cm.comment_id = c.id
	) AS mentioned_users
FROM
	comments c
JOIN
	users u ON c.user_id = u.id
WHERE
	c.item_id = $1
ORDER BY
	c.created_at ASC
`

type ListCommentsForItemRow struct {
	ID             int64              `json:"id"`
	Comment        string             `json:"comment"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	DisplayName    pgtype.Text        `json:"display_name"`
	MentionedUsers interface{}        `json:"mentioned_users"`
}

func (q *Queries) ListCommentsForItem(ctx context.Context, itemID int64) ([]ListCommentsForItemRow, error) {
	rows, err := q.db.Query(ctx, listCommentsForItem, itemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCommentsForItemRow
	for rows.Next() {
		var i ListCommentsForItemRow
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.CreatedAt,
			&i.DisplayName,
			&i.MentionedUsers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
