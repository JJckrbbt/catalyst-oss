// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: apollo_queries.sql

package demo

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const findSimilarMissionKnowledge = `-- name: FindSimilarMissionKnowledge :many
SELECT
    id,
    COALESCE(chunk_text, '')::TEXT AS chunk_text,
    embedding <=> $1 AS similarity_score
FROM
    vw_apollo_mission_knowledge
ORDER BY
    similarity_score
LIMIT 5
`

type FindSimilarMissionKnowledgeRow struct {
	ID              int64       `json:"id"`
	ChunkText       string      `json:"chunk_text"`
	SimilarityScore interface{} `json:"similarity_score"`
}

// Finds knowledge chunks from mission reports that are semantically similar
// to a given input embedding, ordered by similarity (vector cosine distance).
func (q *Queries) FindSimilarMissionKnowledge(ctx context.Context, embedding pgvector.Vector) ([]FindSimilarMissionKnowledgeRow, error) {
	rows, err := q.db.Query(ctx, findSimilarMissionKnowledge, embedding)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindSimilarMissionKnowledgeRow
	for rows.Next() {
		var i FindSimilarMissionKnowledgeRow
		if err := rows.Scan(&i.ID, &i.ChunkText, &i.SimilarityScore); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMissionFacts = `-- name: GetMissionFacts :one
SELECT id, item_type, business_key, mission_name, commander, lunar_module_pilot, launch_date, landing_site
FROM vw_apollo_mission_facts
WHERE mission_name = $1
`

// Fetches the structured facts for a single Apollo mission by its name.
func (q *Queries) GetMissionFacts(ctx context.Context, missionName string) (VwApolloMissionFact, error) {
	row := q.db.QueryRow(ctx, getMissionFacts, missionName)
	var i VwApolloMissionFact
	err := row.Scan(
		&i.ID,
		&i.ItemType,
		&i.BusinessKey,
		&i.MissionName,
		&i.Commander,
		&i.LunarModulePilot,
		&i.LaunchDate,
		&i.LandingSite,
	)
	return i, err
}
