// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: nps_queries.sql

package demo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTotalVisitorsForPark = `-- name: GetTotalVisitorsForPark :one
SELECT park_name, SUM(visitor_count) AS total_visitors
FROM vw_nps_visitation
WHERE park_name = $1
GROUP BY park_name
`

type GetTotalVisitorsForParkRow struct {
	ParkName      string `json:"park_name"`
	TotalVisitors int64  `json:"total_visitors"`
}

// Calculates the sum of all visitors for a single park across all recorded years.
func (q *Queries) GetTotalVisitorsForPark(ctx context.Context, parkName string) (GetTotalVisitorsForParkRow, error) {
	row := q.db.QueryRow(ctx, getTotalVisitorsForPark, parkName)
	var i GetTotalVisitorsForParkRow
	err := row.Scan(&i.ParkName, &i.TotalVisitors)
	return i, err
}

const listParkVisitationRecords = `-- name: ListParkVisitationRecords :many
SELECT id, item_type, state_code, status, created_at, updated_at, park_name, year, visitor_count, notes
FROM vw_nps_visitation
ORDER BY visitor_count DESC
`

// Fetches all park visitation records, ordered by the highest visitor count first.
func (q *Queries) ListParkVisitationRecords(ctx context.Context) ([]VwNpsVisitation, error) {
	rows, err := q.db.Query(ctx, listParkVisitationRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VwNpsVisitation
	for rows.Next() {
		var i VwNpsVisitation
		if err := rows.Scan(
			&i.ID,
			&i.ItemType,
			&i.StateCode,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ParkName,
			&i.Year,
			&i.VisitorCount,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParksByState = `-- name: ListParksByState :many
SELECT id, item_type, state_code, status, created_at, updated_at, park_name, year, visitor_count, notes
FROM vw_nps_visitation
WHERE state_code = $1
ORDER BY year DESC, visitor_count DESC
`

// Fetches all park visitation records for a specific state.
func (q *Queries) ListParksByState(ctx context.Context, stateCode pgtype.Text) ([]VwNpsVisitation, error) {
	rows, err := q.db.Query(ctx, listParksByState, stateCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VwNpsVisitation
	for rows.Next() {
		var i VwNpsVisitation
		if err := rows.Scan(
			&i.ID,
			&i.ItemType,
			&i.StateCode,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ParkName,
			&i.Year,
			&i.VisitorCount,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
